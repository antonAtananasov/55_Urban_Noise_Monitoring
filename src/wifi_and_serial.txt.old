
bool wlCommand(const __FlashStringHelper *cmd, String resp = "OK", unsigned long timeout )
{
    bool b;
    timeout += millis();
    swSerial.println(cmd);
    while (!swSerial.available()) // wait for any response
        ;
    String respBuffer = "";
    while (millis() < timeout)
    {
        if (swSerial.available())
        {

            char b = swSerial.read();
            respBuffer += b;
            Serial.print(b);
            if (b == '\n')
                respBuffer = "";
        }
        if (respBuffer.endsWith(resp))
        {
            b = true;
            break;
        }
        if (respBuffer.endsWith(ERR))
        {
            b = false;
            break;
        }
        if (respBuffer.endsWith(BUSY))
        {
            b = wlCommand(cmd, resp, timeout);
            break;
        }
    }
    Serial.println();
    if (!b)
    {
        Serial.println('!');
    }
    return b;
}
bool wlCommandEmpty(String resp = "OK", unsigned long timeout )
{
    bool b;
    timeout += millis();
    while (!swSerial.available()) // wait for any response
        ;
    String respBuffer = "";
    while (millis() < timeout)
    {
        if (swSerial.available())
        {

            char b = swSerial.read();
            respBuffer += b;
            Serial.print(b);
            if (b == '\n')
                respBuffer = "";
        }
        if (respBuffer.endsWith(resp))
        {
            b = true;
            break;
        }
        if (respBuffer.endsWith(ERR) || respBuffer.endsWith(BUSY))
        {
            b = false;
            break;
        }
    }
    Serial.println();
    return b;
}
bool sendToServer(String str)
{
    bool b = true;

    do
    {
        swSerial.print(F("AT+CIPSEND="));
        swSerial.println(str.length() + 1);
    } while (!wlCommandEmpty());

    // swSerial.print(F("AT+CIPSEND="));
    // swSerial.println(str.length() + 1);
    // b &= wlCommandEmpty();

    swSerial.println(str + '\n');
    b &= wlCommandEmpty();
    return b;
}

bool initWlSer()
{
    bool b = true;
    swSerial.begin(9600);
    wlCommand(F("AT+CIPCLOSE"));
    while (!wlCommand(F("AT+RST"), "ready"))
    {
    }
    b &= wlCommand(F("AT+CWJAP=\"Atanasovi123\",\"51761882A\""));
    b &= wlCommand(F("AT+CIPSTART=\"TCP\",\"192.168.0.109\",12601"));

    Serial.println();
    // else
    //     Serial.println(F("[ERROR]"));
    return b;
}
void processCommandFromStr(String str)
{
    Serial.print('#');
    Serial.println(str);
    if (str.startsWith("<")) // send to esp
    {
        str.remove(0, 1);
        swSerial.println(str);
    }
    else if (str.startsWith(">")) // send over tcp
    {
        str.remove(0, 1);
        sendToServer(str);
    }
    else if (str.startsWith("?"))
    {
        Serial.println(';');
        sendToServer(";");
        // // str.remove(0, 1);
        // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[0]));
        // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[1]));
        // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[2]));
        // // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[3]));
        // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[4]));
        // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[5]));
        // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[6]));
        // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[7]));
        // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[8]));
        // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[9]));
        // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[10]));
        // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[11]));
        // Serial.println((__FlashStringHelper *)pgm_read_word(&helpmsg[12]));
        // Serial.println();
        // if (str.length() == 8)
        // {
        // }
    }
    else if (str.startsWith("marco"))
    {
        sendToServer("polo");
    }
    else if (str.startsWith("time"))
    {
        // str.remove(0, 5);
        printTime();
        Serial.println();
        sendToServer(String(RTC.now().unixtime()));
    }
    else if (str.startsWith("samp"))
    {
        // str.remove(0, 7);
        readSamples();
        // Serial.println((__FlashStringHelper *)pgm_read_word(&serialmsg[4]));
        sendToServer("OK");
        Serial.println();
    }
    // else if (str.startsWith("ssamp"))
    // {
    //     // str.remove(0, 6);
    //     for (int i = 0; i < (int)samples; i++)
    //         Serial.println(vReal[i]);
    //     Serial.println();
    // }
    else if (str.startsWith("fft"))
    {
        // str.remove(0, 4);
        computeFFT();
        // Serial.println((__FlashStringHelper *)pgm_read_word(&serialmsg[4]));
        sendToServer("OK");
        Serial.println();
    }
    // else if (str.startsWith("pfft"))
    // {
    //     // str.remove(0, 5);
    //     printFFTResult();
    //     Serial.println();
    // }
    else if (str.startsWith("ff"))
    {
        // str.remove(0, 8);
        readSamples();
        for (int i = 0; i < (int)samples; i++)
        {
            Serial.println(vReal[i]);
            sendToServer(String(vReal[i]));
        }
        computeFFT();
        Serial.println();
        printFFTResult();
        for (int i = 0; i < (int)samples / 2; i++)
        {
            sendToServer(String(vReal[i]));
        }
        Serial.println();
    }
    else if (str.startsWith("wr"))
    {
        // str.remove(0, 6);
        writeToSD();
        // Serial.println((__FlashStringHelper *)pgm_read_word(&serialmsg[4]));
        sendToServer("OK");
        Serial.println();
    }
    else if (str.startsWith("bat"))
    {
        // str.remove(0, 6);
        Serial.println(vbatt());
        sendToServer(String(vbatt()));
        Serial.println();
    }

    /*
    if (str.startsWith("simulate"))
    {
        // str.remove(0, 9);
        // Serial.println((__FlashStringHelper *)pgm_read_word(&serialmsg[1]));
        for (int j = 0; j < (int)(sizeof(simulatedSignalFrequencies) / sizeof(simulatedSignalFrequencies[0])); j++)
        {
        Serial.print(simulatedSignalFrequencies[j]);
        // Serial.print((__FlashStringHelper *)pgm_read_word(&serialmsg[8]));
        Serial.println(simulatedSignalAmplitudes[j]);
        }
        simulateSamples();
        // Serial.println((__FlashStringHelper *)pgm_read_word(&serialmsg[4]));
        Serial.println();
    }
    */
    /*
    else if (str.startsWith("tel"))
    {
        // str.remove(0, 6);
        writeTelemetryToSD();
        // Serial.println((__FlashStringHelper *)pgm_read_word(&serialmsg[4]));
        Serial.println();
    }
    */
}

void readSwSerial()
{
    while (swSerial.available())
    {
        char b = swSerial.read();
        if (b == '\n')
        {
            // process line
            if (swSerBuffer.startsWith("+IPD"))
            {
                swSerBuffer.remove(0, swSerBuffer.indexOf(':') + 1);
                Serial.print(F("T "));
                Serial.println(swSerBuffer);
                processCommandFromStr(swSerBuffer); // commands from network
            }
            else
            {
                if (swSerBuffer.length() > 1)
                {
                    Serial.print(F("E "));
                    Serial.println(swSerBuffer);
                }
            }
            swSerBuffer = "";
        }
        else
            swSerBuffer += b;
    }
}
void readHwSerial()
{
    while (Serial.available())
    {
        if (hwSerBuffer.length() == 0)
            Serial.print(F("A "));
        char b = Serial.read();
        Serial.print(b);
        if (b != '\n')
        {
            hwSerBuffer += b;
            // process line
        }
        else
        {
            processCommandFromStr(hwSerBuffer);
            hwSerBuffer = "";
        }
    }
}
void sendSDToServer()
{
    sdFile = SdFile(MEASUREMENTS_FILE, FILE_READ);
    unsigned int len = sdFile.fileSize();
    sdFile.seekSet(fileIndex); // go to last read line
    String line = "";
    while (sdFile.curPosition() <= len)
    {
        char b = sdFile.read();
        if (b != '\n')
            line += b;
        else
        {
            sendToServer(line);
            line = "";
            fileIndex = sdFile.curPosition();
        }
    }
}
